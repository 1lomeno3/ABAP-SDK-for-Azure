*----------------------------------------------------------------------*
*       CLASS ZCL_ADF_SERVICE DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_adf_service DEFINITION
  PUBLIC
  ABSTRACT
  CREATE PUBLIC .

  PUBLIC SECTION.

    CONSTANTS gc_service_blob TYPE zazure_dest VALUE 'BLOB'. "#EC NOTEXT
    CONSTANTS gc_service_aad TYPE zazure_dest VALUE 'AAD'.  "#EC NOTEXT
    CONSTANTS gc_service_kv TYPE zazure_dest VALUE 'KV'.    "#EC NOTEXT

    METHODS send
      IMPORTING
        value(request) TYPE xstring
        !it_headers TYPE tihttpnvp OPTIONAL
      EXPORTING
        value(response) TYPE string
        value(ev_http_status) TYPE i
      RAISING
        zcx_adf_service .
    METHODS constructor
      IMPORTING
        value(iv_interface_id) TYPE zinterface_id
        value(iv_service_id) TYPE zazure_dest
        value(iv_business_identifier) TYPE zbusinessid OPTIONAL
      RAISING
        zcx_adf_service
        zcx_http_client_failed
        zcx_interace_config_missing .
    METHODS format_data
      IMPORTING
        value(iv_format_type) TYPE zadf_format_type
        value(it_data) TYPE data
      RETURNING
        value(rv_string) TYPE string
      RAISING
        zcx_adf_service .
    METHODS format_data_to_xml
      IMPORTING
        value(it_data) TYPE data
      RETURNING
        value(rv_string) TYPE string .
    METHODS format_data_to_json
      IMPORTING
        value(it_data) TYPE data
      RETURNING
        value(rv_string) TYPE string .
    METHODS add_expiry_time
      IMPORTING
        value(iv_expiry_hour) TYPE i
        value(iv_expiry_min) TYPE i DEFAULT 30
        value(iv_expiry_sec) TYPE i
      RAISING
        zcx_adf_service .
    METHODS urlencoded_to_http_fields
      IMPORTING
        !iv_response_data TYPE string
      RETURNING
        value(et_fields) TYPE tihttpnvp
      RAISING
        zcx_adf_service .
    METHODS json_to_http_fields
      IMPORTING
        !iv_response_data TYPE string
      RETURNING
        value(et_fields) TYPE tihttpnvp
      RAISING
        zcx_adf_service .

  PROTECTED SECTION.

    CONSTANTS gc_error TYPE char1 VALUE 'E'.                "#EC NOTEXT
    DATA gv_interface_id TYPE zinterface_id .
    DATA gv_sas_key TYPE string .
    DATA gv_uri TYPE string .
    DATA go_rest_api TYPE REF TO zcl_rest_framework .
    TYPE-POOLS abap .
    DATA gv_asynchronous TYPE abap_bool .
    DATA gv_is_try TYPE abap_bool .
    DATA gv_expiry_hour TYPE i .
    DATA gv_expiry_min TYPE i .
    DATA gv_expiry_sec TYPE i .
    DATA gv_string_to_sign TYPE string .
    DATA gv_service_version TYPE string .

    METHODS add_request_header
      IMPORTING
        value(iv_name) TYPE string
        value(iv_value) TYPE string .
    METHODS get_sas_token
      IMPORTING
        value(iv_baseaddress) TYPE string
      RETURNING
        value(rv_sas_token) TYPE string
      RAISING
        zcx_adf_service .
    METHODS get_epoch_time
      RETURNING
        value(rv_expiry_time) TYPE string
      RAISING
        zcx_adf_service .
    METHODS decode_sign
      RETURNING
        value(rv_secret) TYPE string
      RAISING
        zcx_adf_service .

  PRIVATE SECTION.

    CONSTANTS gc_format_xml TYPE zadf_format_type VALUE 'XML'. "#EC NOTEXT
    CONSTANTS gc_format_json TYPE zadf_format_type VALUE 'JSON'. "#EC NOTEXT
    CONSTANTS gc_asynchronous TYPE char1 VALUE 'A'.         "#EC NOTEXT
    CONSTANTS gc_synchronous TYPE char1 VALUE 'S'.          "#EC NOTEXT
    DATA gv_destination TYPE zazure_dest .
    DATA gv_service_id TYPE zazure_dest .

    METHODS get_interface_details
      RAISING
        zcx_adf_service .
    METHODS get_rest_api_ref
      IMPORTING
        !iv_business_identifier TYPE zbusinessid OPTIONAL
      RAISING
        zcx_adf_service
        zcx_http_client_failed
        zcx_interace_config_missing .
    METHODS call_stack_check
      RAISING
        zcx_adf_service .
ENDCLASS.                    "ZCL_ADF_SERVICE DEFINITION

*----------------------------------------------------------------------*
*       CLASS ZCL_ADF_SERVICE IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_adf_service IMPLEMENTATION.

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->ADD_EXPIRY_TIME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EXPIRY_HOUR                 TYPE        I
* | [--->] IV_EXPIRY_MIN                  TYPE        I (default =30)
* | [--->] IV_EXPIRY_SEC                  TYPE        I
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_expiry_time.
    CLEAR: gv_expiry_hour,gv_expiry_min,gv_expiry_sec.
    gv_expiry_hour = iv_expiry_hour.
    gv_expiry_min  = iv_expiry_min.
    gv_expiry_sec  = iv_expiry_sec.
    IF ( gv_expiry_hour IS INITIAL ) AND
       ( gv_expiry_min IS INITIAL )  AND
       ( gv_expiry_sec IS INITIAL ).
      RAISE EXCEPTION TYPE zcx_adf_service
        EXPORTING
          textid       = zcx_adf_service=>expiry_time_not_set
          interface_id = gv_interface_id.
    ENDIF.
  ENDMETHOD.                    "add_expiry_time

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ADF_SERVICE->ADD_REQUEST_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* | [--->] IV_VALUE                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_request_header.
    go_rest_api->zif_rest_framework~set_request_header( iv_name = iv_name iv_value = iv_value ).
  ENDMETHOD.                    "ADD_REQUEST_HEADER

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ADF_SERVICE->CALL_STACK_CHECK
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD call_stack_check.
    DATA : lt_abap_stack TYPE abap_callstack,
           lt_syst_stack TYPE sys_callst.
    CALL FUNCTION 'SYSTEM_CALLSTACK'
      IMPORTING
        callstack    = lt_abap_stack
        et_callstack = lt_syst_stack.
    READ TABLE lt_abap_stack TRANSPORTING NO FIELDS
               WITH KEY mainprogram = 'ZCL_ADF_SERVICE_FACTORY=======CP'
                        blocktype = 'METHOD'
                        blockname = 'CREATE'.
    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_adf_service
        EXPORTING
          textid       = zcx_adf_service=>execution_terminated
          interface_id = space.
    ENDIF.
  ENDMETHOD.                    "call_stack_check

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_INTERFACE_ID                TYPE        ZINTERFACE_ID
* | [--->] IV_SERVICE_ID                  TYPE        ZAZURE_DEST
* | [--->] IV_BUSINESS_IDENTIFIER         TYPE        ZBUSINESSID(optional)
* | [!CX!] ZCX_ADF_SERVICE
* | [!CX!] ZCX_HTTP_CLIENT_FAILED
* | [!CX!] ZCX_INTERACE_CONFIG_MISSING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    call_stack_check( ).
    gv_interface_id = iv_interface_id.
    gv_service_id   = iv_service_id.
    get_interface_details( ).
    get_rest_api_ref( EXPORTING iv_business_identifier = iv_business_identifier ).
  ENDMETHOD.                    "constructor

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ADF_SERVICE->DECODE_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SECRET                      TYPE        STRING
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD decode_sign.
*This Include is to encrypt secrets with SSL client ID from STRUST     *
*Framework Author : Krishna Chandra Dash                               *
*                   Sasidhar Puranam                                   *
*----------------------------------------------------------------------*
* Date      | USER ID  |Transport   | Remarks                          *
*-----------|----------|------------|------------|---------------------*
*11.07.2017 | KRDASH   |            |Logic chnaged related to encryption
*----------------------------------------------------------------------*
    CONSTANTS: lc_profile TYPE ztvarvc-varname VALUE 'SSL_CLIENT_ID'."KRDASH
    DATA : lv_rfc_destination     TYPE zrest_config-destination,
           lv_srtfd               TYPE zadf_con_indx-srtfd,
           lw_indx                TYPE zadf_con_indx,
           lt_enveloped_data      TYPE TABLE OF ssfbin,
           lv_cert_string         TYPE xstring,
           lt_recipients          TYPE TABLE OF ssfinfo,
           lw_recipient           TYPE ssfinfo,
           lt_input_data          TYPE TABLE OF ssfbin,
           lw_input_data          TYPE ssfbin,
           lv_env_data_len        TYPE i,
           lv_env_len_total       TYPE i,
           lv_subject             TYPE string,
           lw_enveloped_data      TYPE ssfbin,
           lv_xstr_input          TYPE xstring,
           lv_len_output          TYPE i,
           lv_len_input           TYPE i,
           lt_decoded_bin         TYPE TABLE OF x,
           lv_decoded_str         TYPE string,
           lv_applic              TYPE rfcdisplay-sslapplic,
           lv_psename             TYPE ssfpsename,
           lv_flag_ssf            TYPE c, "Added by KRDASH
**Start of changes by KRDASH MS2K960975
          lv_profilename          TYPE localfile,
**End of changes by KRDASH MS2K960975
           lv_profile             TYPE ssfparms-pab.
    lv_srtfd = gv_interface_id.
    DEFINE decode_key.
*Import internal table as a cluster from INDX
      import tab  = lt_enveloped_data[]
             from database zadf_con_indx(zd)
             to lw_indx
             id lv_srtfd.
**Start of changes by KRDASH
**Fetching data using new encryption framework
      if ( lt_enveloped_data[] is initial ) or
         ( gv_sas_key is initial ).
        lv_flag_ssf = abap_true.
*Import internal table as a cluster from INDX
        import tab  = lt_enveloped_data[]
               from database zssf_con_indx(ze)
               to lw_indx
               id lv_srtfd.
      endif.
**End of changes by KRDASH
      if not lt_enveloped_data[] is initial.
**Old encryption framework
        if lv_flag_ssf eq abap_false. "Added by KRDASH
          clear lv_rfc_destination.
          select single destination from zrest_config
                                    into lv_rfc_destination
                                    where interface_id eq gv_interface_id.
          if not lv_rfc_destination is initial .
            call function 'RFC_READ_HTTP_DESTINATION'
              exporting
                destination             = lv_rfc_destination
                authority_check         = ' '
              importing
                sslapplic               = lv_applic
              exceptions
                authority_not_available = 1
                destination_not_exist   = 2
                information_failure     = 3
                internal_failure        = 4
                no_http_destination     = 5
                others                  = 6.
            if sy-subrc ne 0.
              raise exception type zcx_adf_service
                exporting
                  textid       = zcx_adf_service=>read_error_rfc_destination
                  interface_id = gv_interface_id.
            endif.
**Start of changes by KRDASH
          else.
            raise exception type zcx_adf_service
              exporting
                textid       = zcx_adf_service=>rfc_destination_not_maintained
                interface_id = gv_interface_id.
          endif.
        else.
**New Encryption framework
**Fetching PSE profile name from ZTVARVC table
          clear lv_applic.
          select single low from ztvarvc
                        into lv_applic
                        where varname eq lc_profile.
        endif.
**End of changes by KRDASH
        call function 'SSFPSE_FILENAME'
          exporting
            mandt         = sy-mandt
            context       = 'SSLC'
            applic        = lv_applic
          importing
            psename       = lv_psename
            profile       = lv_profilename
          exceptions
            pse_not_found = 1
            others        = 2.
        if sy-subrc ne 0.
          raise exception type zcx_adf_service
            exporting
              textid       = zcx_adf_service=>read_error_pse_filename
              interface_id = gv_interface_id.
        endif.
        if not lv_psename is initial.
          lv_profile = lv_psename.
          call function 'SSFC_GET_CERTIFICATE'
            exporting
              profile               = lv_profile
            importing
              certificate           = lv_cert_string
            exceptions
              ssf_krn_error         = 1
              ssf_krn_nomemory      = 2
              ssf_krn_nossflib      = 3
              ssf_krn_invalid_par   = 4
              ssf_krn_nocertificate = 5
              others                = 6.
          if sy-subrc ne 0.
**Start of chnages by KRDASH MS2K960975
**Addinng complete profile path for reading certificate instance
            lv_profile = lv_profilename.
            call function 'SSFC_GET_CERTIFICATE'
              exporting
                profile               = lv_profile
              importing
                certificate           = lv_cert_string
              exceptions
                ssf_krn_error         = 1
                ssf_krn_nomemory      = 2
                ssf_krn_nossflib      = 3
                ssf_krn_invalid_par   = 4
                ssf_krn_nocertificate = 5
                others                = 6.
            if sy-subrc ne 0.
**End of chnages by KRDASH MS2K960975
**Raise Exception
              raise exception type zcx_adf_service
                exporting
                  textid       = zcx_adf_service=>error_get_certificate_instance
                  interface_id = gv_interface_id.
            endif. "Added by KRDASH MS2K960975
          endif.
          call function 'SSFC_PARSE_CERTIFICATE'
            exporting
              certificate         = lv_cert_string
            importing
              subject             = lv_subject
            exceptions
              ssf_krn_error       = 1
              ssf_krn_nomemory    = 2
              ssf_krn_nossflib    = 3
              ssf_krn_invalid_par = 4
              others              = 5.
          if sy-subrc ne 0.
**Raise Exception
            raise exception type zcx_adf_service
              exporting
                textid       = zcx_adf_service=>error_attributes_certificate
                interface_id = gv_interface_id.
          endif.
          lw_recipient-id      = lv_subject.
          lw_recipient-profile = lv_profile.
          append lw_recipient to lt_recipients.
          loop at lt_enveloped_data into lw_enveloped_data.
            lv_env_data_len = xstrlen( lw_enveloped_data-bindata ).
            lv_env_len_total = lv_env_len_total + lv_env_data_len.
            clear lw_enveloped_data.
          endloop.
          call function 'SSF_KRN_DEVELOPE'
            exporting
              ssftoolkit                   = 'SAPSECULIB'
              str_format                   = 'PKCS7'
*         B_OUTDEC                     = 'X'
*         IO_SPEC                      = 'T'
              ostr_enveloped_data_l        = lv_env_len_total
            importing
              ostr_output_data_l           = lv_len_input
*         CRC                          =
            tables
              ostr_enveloped_data          = lt_enveloped_data
              recipient                    = lt_recipients
              ostr_output_data             = lt_input_data
            exceptions
              ssf_krn_error                = 1
              ssf_krn_noop                 = 2
              ssf_krn_nomemory             = 3
              ssf_krn_opinv                = 4
              ssf_krn_nossflib             = 5
              ssf_krn_recipient_error      = 6
              ssf_krn_input_data_error     = 7
              ssf_krn_invalid_par          = 8
              ssf_krn_invalid_parlen       = 9
              ssf_fb_input_parameter_error = 10
              others                       = 11.
          if sy-subrc ne 0.
**Raise Exception
            raise exception type zcx_adf_service
              exporting
                textid       = zcx_adf_service=>error_decode_sas_key
                interface_id = gv_interface_id.
          endif.
          if not lt_input_data[] is initial.
            call function 'SCMS_BINARY_TO_STRING'
              exporting
                input_length  = lv_len_input
              importing
                text_buffer   = lv_decoded_str
                output_length = lv_len_output
              tables
                binary_tab    = lt_input_data
              exceptions
                failed        = 1
                others        = 2.
            if lv_decoded_str is initial.
**Raise exception
              raise exception type zcx_adf_service
                exporting
                  textid       = zcx_adf_service=>error_con_saskey_string
                  interface_id = gv_interface_id.
            else.
              rv_secret = lv_decoded_str.
            endif.
          else.
**Raise exception
            raise exception type zcx_adf_service
              exporting
                textid       = zcx_adf_service=>error_read_encoded_saskey
                interface_id = gv_interface_id.
          endif.
        endif.
**Start of comment by KRDASH
**Below lines of code validation have been moved to line no.74
*    ELSE.
*      RAISE EXCEPTION TYPE zcx_adf_service
*        EXPORTING
*          textid       = zcx_adf_service=>rfc_destination_not_maintained
*          interface_id = gv_interface_id.
*    ENDIF.
**End of comment by KRDASH
      else.
**Raise Exception
        raise exception type zcx_adf_service
          exporting
            textid       = zcx_adf_service=>error_import_sas_key
            interface_id = gv_interface_id.
      endif.
      if rv_secret is initial.
        raise exception type zcx_adf_service
          exporting
            textid       = zcx_adf_service=>sas_key_not_maintained
            interface_id = gv_interface_id.
      endif.
    END-OF-DEFINITION.
    decode_key.
  ENDMETHOD.                    "decode_sign

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->FORMAT_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_FORMAT_TYPE                 TYPE        ZADF_FORMAT_TYPE
* | [--->] IT_DATA                        TYPE        DATA
* | [<-()] RV_STRING                      TYPE        STRING
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD format_data.
    CASE iv_format_type.
      WHEN gc_format_xml.
        rv_string = format_data_to_xml( it_data ).
      WHEN gc_format_json.
        rv_string = format_data_to_json( it_data ).
      WHEN OTHERS.
        RAISE EXCEPTION TYPE zcx_adf_service
          EXPORTING
            textid      = zcx_adf_service=>format_not_supported
            format_type = iv_format_type.
    ENDCASE.
  ENDMETHOD.                    "format_data

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->FORMAT_DATA_TO_JSON
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DATA                        TYPE        DATA
* | [<-()] RV_STRING                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD format_data_to_json.

    DATA : lo_json TYPE REF TO cl_trex_json_serializer.

    CREATE OBJECT lo_json
      EXPORTING
        data = it_data.
    lo_json->serialize( ).
    rv_string  = lo_json->get_data( ).
  ENDMETHOD.                    "format_data_to_json

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->FORMAT_DATA_TO_XML
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DATA                        TYPE        DATA
* | [<-()] RV_STRING                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD format_data_to_xml.
    CALL TRANSFORMATION ('ID') SOURCE itab = it_data RESULT XML rv_string.
  ENDMETHOD.                    "format_data_to_xml

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ADF_SERVICE->GET_EPOCH_TIME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_EXPIRY_TIME                 TYPE        STRING
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_epoch_time.
    DATA : lv_start_timestamp   TYPE timestampl,
           lv_current_timestamp TYPE timestampl,
           lv_seconds           TYPE p,
           lv_input_seconds     TYPE p,
           zcx_adf_service      TYPE REF TO zcx_adf_service.
    DATA: date TYPE datum,
          time TYPE uzeit.
*Get the current timestamp
    GET TIME STAMP FIELD  lv_current_timestamp .
*Get the time difference
    DATA zone TYPE sy-zonlo.
    CONVERT TIME STAMP lv_current_timestamp TIME ZONE zone INTO DATE date TIME time.
    TRY.
        CALL METHOD cl_abap_tstmp=>td_subtract
          EXPORTING
            date1    = date
            time1    = time
            date2    = '19700101'
            time2    = '000000'
          IMPORTING
            res_secs = lv_seconds.
* Add expiry time in seconds
        lv_input_seconds = ( ( gv_expiry_hour * 60 ) * 60  ) + ( gv_expiry_min * 60 ) +
                           ( gv_expiry_sec ).
        lv_seconds = lv_seconds + lv_input_seconds.
        rv_expiry_time = lv_seconds.
        CONDENSE rv_expiry_time.
      CATCH cx_parameter_invalid_type.
        RAISE EXCEPTION TYPE zcx_adf_service
          EXPORTING
            textid       = zcx_adf_service=>parameter_invalid_type
            interface_id = gv_interface_id.
      CATCH cx_parameter_invalid_range .
        RAISE EXCEPTION TYPE zcx_adf_service
          EXPORTING
            textid       = zcx_adf_service=>parameter_invalid_range
            interface_id = gv_interface_id.
    ENDTRY.
  ENDMETHOD.                    "GET_EPOCH_TIME

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ADF_SERVICE->GET_INTERFACE_DETAILS
* +-------------------------------------------------------------------------------------------------+
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_interface_details.

    DATA : ls_config TYPE zadf_config.

    SELECT SINGLE * FROM zadf_config
           INTO ls_config
           WHERE interface_id = gv_interface_id.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_adf_service
        EXPORTING
          textid       = zcx_adf_service=>interface_not_available
          interface_id = gv_interface_id.
    ENDIF.
    IF ( ls_config-uri IS INITIAL ) AND ( ( gv_service_id NE gc_service_blob ) AND
                                          ( gv_service_id NE gc_service_aad ) AND
                                          ( gv_service_id NE gc_service_kv  ) ).
      RAISE EXCEPTION TYPE zcx_adf_service
        EXPORTING
          textid       = zcx_adf_service=>uri_not_maintained
          interface_id = gv_interface_id.
    ELSE.
      gv_uri = ls_config-uri.
    ENDIF.
    IF ls_config-service_type IS INITIAL.
      RAISE EXCEPTION TYPE zcx_adf_service
        EXPORTING
          textid       = zcx_adf_service=>call_type_not_maintained
          interface_id = gv_interface_id.
    ELSE.
      IF ls_config-service_type EQ gc_synchronous.
        gv_asynchronous = abap_false.
      ELSEIF ls_config-service_type EQ gc_asynchronous.
        gv_asynchronous = abap_true.
      ENDIF.
    ENDIF.
    gv_is_try = ls_config-is_try.
    gv_sas_key = ls_config-sas_key. "Added by KRDASH
  ENDMETHOD.                    "get_interface_details

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_ADF_SERVICE->GET_REST_API_REF
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_BUSINESS_IDENTIFIER         TYPE        ZBUSINESSID(optional)
* | [!CX!] ZCX_ADF_SERVICE
* | [!CX!] ZCX_HTTP_CLIENT_FAILED
* | [!CX!] ZCX_INTERACE_CONFIG_MISSING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_rest_api_ref.
    DATA : lcx_interface TYPE REF TO zcx_interace_config_missing,
           lcx_http      TYPE REF TO zcx_http_client_failed.
    IF go_rest_api IS INITIAL.
      TRY.
          CASE gv_service_id.
            WHEN gc_service_blob.
              CREATE OBJECT go_rest_api
                EXPORTING
                  interface_name      = gv_interface_id       "Mandatory
                  business_identifier = iv_business_identifier
                  method              = 'PUT'.               "For troubleshooting
            WHEN OTHERS.
              CREATE OBJECT go_rest_api
                EXPORTING
                  interface_name      = gv_interface_id       "Mandatory
                  business_identifier = iv_business_identifier
                  method              = 'POST'.               "For troubleshooting
          ENDCASE.
        CATCH zcx_interace_config_missing INTO lcx_interface.
          RAISE EXCEPTION lcx_interface.
        CATCH zcx_http_client_failed INTO lcx_http .
          RAISE EXCEPTION lcx_http.
      ENDTRY.
      IF go_rest_api IS BOUND.
*Optional - To help developer understand the origin of call
        go_rest_api->set_callingmethod( EXPORTING zimethodname = 'SEND' ).
*Optional - To help developer understand the origin of call
        go_rest_api->set_callingprogram( EXPORTING ziclassname = 'ZCL_ADF_SERVICE' ).
      ELSE.
        RAISE EXCEPTION TYPE zcx_adf_service
          EXPORTING
            textid       = zcx_adf_service=>error_rest_api_instance
            interface_id = gv_interface_id.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "get_rest_api_ref

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Protected Method ZCL_ADF_SERVICE->GET_SAS_TOKEN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_BASEADDRESS                 TYPE        STRING
* | [<-()] RV_SAS_TOKEN                   TYPE        STRING
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_sas_token.
    DATA : lv_string_to_sign       TYPE string,
           encoded_base_address    TYPE string,
           body_xstring            TYPE xstring,
           sign                    TYPE string,
           final_token             TYPE string,
           decoded                 TYPE xstring,
           conv                    TYPE REF TO cl_abap_conv_out_ce,
           conv_in                 TYPE REF TO cl_abap_conv_in_ce,
           format                  TYPE i,
           new_expiry              TYPE string,
           lv_sas_key              TYPE string,
           lv_expiry_time          TYPE string.
    get_epoch_time( RECEIVING rv_expiry_time =  lv_expiry_time ).
    format = 18.
    encoded_base_address = escape( val = iv_baseaddress format = format  ).
    CONCATENATE encoded_base_address  cl_abap_char_utilities=>newline lv_expiry_time INTO lv_string_to_sign.

    conv = cl_abap_conv_out_ce=>create( encoding = 'UTF-8' ).
    conv->convert( EXPORTING data = lv_string_to_sign IMPORTING buffer = body_xstring ).
    DEFINE encrypt_key.
      decode_sign( receiving rv_secret = lv_sas_key ).
      conv = cl_abap_conv_out_ce=>create( encoding = 'UTF-8' ).
      conv->convert( exporting data = lv_sas_key importing buffer = decoded ).

      call method cl_abap_hmac=>calculate_hmac_for_raw
        exporting
          if_algorithm     = 'sha-256'
          if_key           = decoded
          if_data          = body_xstring
          if_length        = 0
        importing
          ef_hmacb64string = sign.
      clear : lv_sas_key, decoded.
    END-OF-DEFINITION.
    encrypt_key.
    new_expiry = lv_expiry_time.
    CONDENSE new_expiry.
    IF NOT sign IS INITIAL.
      sign = escape( val = sign format = format  ).
      CONCATENATE 'SharedAccessSignature sr=' encoded_base_address  '&sig=' sign '&se=' new_expiry '&skn=' 'edit' INTO final_token.
      rv_sas_token = final_token.
    ELSE.
      RAISE EXCEPTION TYPE zcx_adf_service
        EXPORTING
          textid       = zcx_adf_service=>sas_key_not_generated
          interface_id = gv_interface_id.
    ENDIF.
  ENDMETHOD.                    "get_sas_token

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->JSON_TO_HTTP_FIELDS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_RESPONSE_DATA               TYPE        STRING
* | [<-()] ET_FIELDS                      TYPE        TIHTTPNVP
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD json_to_http_fields.
    DATA: ls_fields         TYPE ihttpnvp,
            l_node          TYPE REF TO if_sxml_node,
            l_error         TYPE string,
            lr_open_element TYPE REF TO  if_sxml_open_element,
            lt_attributes   TYPE if_sxml_attribute=>attributes,
            ls_attribute    LIKE LINE OF lt_attributes,
            lr_value_node   TYPE REF TO if_sxml_value_node,
            json            TYPE xstring,
            reader          TYPE REF TO if_sxml_reader,
            parse_error     TYPE REF TO cx_sxml_parse_error.
    TRY .
        json = cl_abap_codepage=>convert_to( iv_response_data ).
        reader = cl_sxml_string_reader=>create( json ).
        " after parse, the json response should look like following

*          <object>
*          	<str name="access_token">ya29.AHES6ZR2S7rsK4a13j9MwOGuJipk6cXQ9_ynkLxkZI6cvw</str>
*          	<str name="token_type">Bearer</str>
*          	<num name="expires_in">3600</num>
*          	<str name="refresh_token">1/KLS_LRVubymiCnszl-lROdQhSwSOP3P9hgCB1S0uCkc</str>
*          </object>
        DO.
          CLEAR ls_fields.
          l_node = reader->read_next_node( ).

          IF l_node IS INITIAL.
            EXIT.
          ENDIF.
          CASE l_node->type.
            WHEN if_sxml_node=>co_nt_element_open.
              lr_open_element ?= l_node.
              lt_attributes  = lr_open_element->get_attributes( ).
              IF lt_attributes IS NOT INITIAL.
                " get name
                READ TABLE lt_attributes INDEX 1 INTO ls_attribute.
                ls_fields-name = ls_attribute->get_value( ).
                " get value
                l_node = reader->read_next_node( ).
                IF l_node->type = if_sxml_node=>co_nt_value..
                  lr_value_node ?= l_node .
                  ls_fields-value = lr_value_node->get_value( ).
                  " add field into the result table
                  APPEND ls_fields TO et_fields.
                ENDIF.
              ENDIF.
            WHEN OTHERS.
              " do nothing
          ENDCASE.
        ENDDO.
      CATCH cx_sxml_parse_error INTO parse_error.
        RAISE EXCEPTION TYPE zcx_adf_service
          EXPORTING
            textid       = zcx_adf_service=>parse_error
            interface_id = gv_interface_id.
    ENDTRY.
  ENDMETHOD.                    "json_to_http_fields

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->SEND
* +-------------------------------------------------------------------------------------------------+
* | [--->] REQUEST                        TYPE        XSTRING
* | [--->] IT_HEADERS                     TYPE        TIHTTPNVP(optional)
* | [<---] RESPONSE                       TYPE        STRING
* | [<---] EV_HTTP_STATUS                 TYPE        I
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD send.
    DATA : lo_response     TYPE REF TO if_rest_entity,
           lo_request      TYPE REF TO if_rest_entity,
           lv_expiry       TYPE string,
           lv_sas_token    TYPE string,
           lv_msg          TYPE string,
           lcx_adf_service TYPE REF TO zcx_adf_service.
    IF go_rest_api IS BOUND.
      TRY.
          get_sas_token( EXPORTING iv_baseaddress = gv_uri
                         RECEIVING rv_sas_token  = lv_sas_token ).
        CATCH zcx_adf_service INTO lcx_adf_service.
          lv_msg =  lcx_adf_service->get_text( ).
          MESSAGE lv_msg TYPE 'I'.
      ENDTRY.
      add_request_header( iv_name = 'Content-Type' iv_value = 'application/json; charset=utf-8' ).
      add_request_header( iv_name = 'Authorization' iv_value = lv_sas_token ).
      go_rest_api->zif_rest_framework~set_binary_body( request ).
      IF NOT it_headers[] IS INITIAL.
        go_rest_api->zif_rest_framework~set_request_headers( it_header_fields = it_headers[] ).
      ENDIF.
**Rest API call to get response from Azure Destination
      lo_response = go_rest_api->zif_rest_framework~execute( io_entity = lo_request async = gv_asynchronous is_retry = gv_is_try ).
      ev_http_status = go_rest_api->get_status( ).
      go_rest_api->close( ).
      IF lo_response IS BOUND.
        response = lo_response->get_string_data( ).
      ELSE.
        RAISE EXCEPTION TYPE zcx_adf_service
          EXPORTING
            textid       = zcx_adf_service=>restapi_response_not_found
            interface_id = gv_interface_id.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "send

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_ADF_SERVICE->URLENCODED_TO_HTTP_FIELDS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_RESPONSE_DATA               TYPE        STRING
* | [<-()] ET_FIELDS                      TYPE        TIHTTPNVP
* | [!CX!] ZCX_ADF_SERVICE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD urlencoded_to_http_fields.
    DATA:  lt_params  TYPE STANDARD TABLE OF string,
           ls_response_field LIKE LINE OF et_fields.
    FIELD-SYMBOLS:  <l_param> LIKE LINE OF lt_params.
    SPLIT iv_response_data AT `&` INTO TABLE lt_params.
    LOOP AT lt_params ASSIGNING <l_param>.
      SPLIT <l_param> AT `=` INTO ls_response_field-name
                                  ls_response_field-value.
      APPEND ls_response_field TO et_fields.
    ENDLOOP.
  ENDMETHOD.                    "urlencoded_to_http_fields

ENDCLASS.                    "ZCL_ADF_SERVICE IMPLEMENTATION
