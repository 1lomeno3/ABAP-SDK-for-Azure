*----------------------------------------------------------------------*
*       CLASS ZCL_REST_FRAMEWORK DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_rest_framework DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zif_rest_framework .
    INTERFACES if_serializable_object .

    ALIASES execute
      FOR zif_rest_framework~execute .
    ALIASES set_binary_body
      FOR zif_rest_framework~set_binary_body .
    ALIASES set_request_header
      FOR zif_rest_framework~set_request_header .
    ALIASES set_request_headers
      FOR zif_rest_framework~set_request_headers .
    ALIASES set_string_body
      FOR zif_rest_framework~set_string_body .
    ALIASES set_uri
      FOR zif_rest_framework~set_uri .

    METHODS constructor
      IMPORTING
        !interface_name TYPE zinterface_id
        !business_identifier TYPE zbusinessid OPTIONAL
        !method TYPE char20
        !logdata_in_updatetask TYPE char1 OPTIONAL
      RAISING
        zcx_interace_config_missing
        zcx_http_client_failed .
    METHODS get_callingprogram
      RETURNING
        value(zeclassname) TYPE zclassname .
    METHODS get_callingmethod
      RETURNING
        value(zemethod) TYPE zclassname .
    METHODS get_starttime
      RETURNING
        value(rv_starttime) TYPE sy-uzeit .
    METHODS get_startdate
      RETURNING
        value(rv_startdate) TYPE sy-datum .
    METHODS get_submittime
      RETURNING
        value(rv_submittime) TYPE sy-uzeit .
    METHODS get_submitdate
      RETURNING
        value(rv_submitdate) TYPE sy-datum .
    METHODS get_endtime
      RETURNING
        value(rv_endtime) TYPE sy-uzeit .
    METHODS get_endate
      RETURNING
        value(rv_enddate) TYPE datum .
    METHODS get_response_header
      IMPORTING
        !iv_name TYPE string
      RETURNING
        value(rv_value) TYPE string .
    METHODS get_response_headers
      RETURNING
        value(rt_header_fields) TYPE tihttpnvp .
    METHODS set_guid
      RETURNING
        value(guid) TYPE guid_16 .
    METHODS get_user
      RETURNING
        value(rv_user) TYPE sy-uname .
    METHODS get_status
      RETURNING
        value(rv_status) TYPE i .
    METHODS get_http_client
      RETURNING
        value(result) TYPE REF TO if_http_client .
    METHODS get_rest_client
      RETURNING
        value(result) TYPE REF TO cl_rest_http_client .
    METHODS is_retry
      RETURNING
        value(result) TYPE abap_bool .
    METHODS get_request
      RETURNING
        value(result) TYPE REF TO if_rest_entity .
    METHODS get_guid
      RETURNING
        value(result) TYPE guid_16 .
    METHODS get_interface
      RETURNING
        value(interface_name) TYPE zinterface_id .
    METHODS get_businessid
      RETURNING
        value(result) TYPE zbusinessid .
    METHODS set_callingprogram
      IMPORTING
        !ziclassname TYPE zclassname .
    METHODS set_callingmethod
      IMPORTING
        !zimethodname TYPE zmethodname .
    METHODS get_uri
      RETURNING
        value(result) TYPE zuri .
    METHODS get_retrynum
      RETURNING
        value(result) TYPE zq_counte .
    METHODS get_method
      RETURNING
        value(result) TYPE char20 .
    METHODS get_duration
      RETURNING
        value(r_secs) TYPE tzntstmpl .
    METHODS get_program_headers
      RETURNING
        value(result) TYPE tihttpnvp .
    METHODS close .

  PROTECTED SECTION.

  PRIVATE SECTION.

    TYPES wa TYPE zrest_mon_trace .
    TYPES wa_ekko TYPE zrest_mon_trace .
    TYPES zrest_mon_trace TYPE zrest_mon_trace .

    CONSTANTS create_by_destination TYPE char1 VALUE 1.     "#EC NOTEXT
    CLASS-DATA gwa_header TYPE zrest_mon_header .
    CLASS-DATA it_log_headers TYPE zrt_header_log .
    DATA error TYPE c .
    CLASS-DATA response_header_string TYPE string .
    CLASS-DATA request_header_string TYPE string .
    DATA calling_program_name TYPE zclassname .
    DATA calling_method_name TYPE zclassname .
    DATA rest_client TYPE REF TO cl_rest_http_client .
    DATA http_client TYPE REF TO if_http_client .
    DATA submit_date TYPE sy-datum .
    DATA submit_time TYPE sy-uzeit .
    DATA start_time TYPE sy-uzeit .
    DATA start_date TYPE sy-datum .
    DATA end_time TYPE sy-uzeit .
    DATA end_date TYPE sy-datum .
    DATA message_id TYPE guid_16 .
    DATA indentifier TYPE string .
    DATA retry TYPE abap_bool .
    DATA user TYPE uname .
    DATA gt_log TYPE zrt_monitor .
    DATA gwa_log TYPE zrest_monitor .
    CONSTANTS head TYPE char8 VALUE 'HEAD'.                 "#EC NOTEXT
    CONSTANTS get TYPE char8 VALUE 'GET'.                   "#EC NOTEXT
    CONSTANTS delete TYPE char8 VALUE 'DELETE'.             "#EC NOTEXT
    CONSTANTS options TYPE char8 VALUE 'OPTIONS'.           "#EC NOTEXT
    CONSTANTS post TYPE char8 VALUE 'POST'.                 "#EC NOTEXT
    CONSTANTS put TYPE char8 VALUE 'PUT'.                   "#EC NOTEXT
    DATA request TYPE REF TO if_rest_entity .
    DATA response TYPE REF TO if_rest_entity .
    DATA http_status TYPE i .
    CLASS-DATA content_type TYPE char75 .
    CLASS-DATA interface TYPE zinterface_id .
    CLASS-DATA businessid TYPE zbusinessid .
    CLASS-DATA uri_final TYPE zuri .
    CLASS-DATA retry_cnt TYPE zq_counte .
    CLASS-DATA method_call TYPE char20 .
    CLASS-DATA pre_timestamp TYPE timestampl .
    CLASS-DATA pro_timestamp TYPE timestampl .
    CLASS-DATA duration TYPE tzntstmpl .
    CLASS-DATA log_update_task TYPE char1 .
    CLASS-DATA program_headers TYPE tihttpnvp .

    METHODS set_interface_id
      IMPORTING
        !interface TYPE zinterface_id .
    METHODS log_end_params .
    METHODS log_start_params .
    METHODS log_submit_params .
    METHODS set_user .
    METHODS set_enddate
      IMPORTING
        !iv_endate TYPE datum .
    METHODS set_endtime
      IMPORTING
        !iv_endtime TYPE sy-uzeit .
    METHODS set_startdate .
    METHODS set_submitdate .
    METHODS set_submittime .
    METHODS set_starttime .
    METHODS createhttpclient
      IMPORTING
        !interface TYPE zinterface_id
        !method TYPE char20
      RETURNING
        value(http_client) TYPE REF TO if_http_client
      RAISING
        zcx_interace_config_missing
        zcx_http_client_failed .
    METHODS save_log .
    METHODS createrestclient
      IMPORTING
        !iv_http_client TYPE REF TO if_http_client
      RETURNING
        value(rv_rest_client) TYPE REF TO cl_rest_http_client .
*  methods set_submitdate.
*  methods set_submittime.
    METHODS create_request_entity
      IMPORTING
        !iv_multipart TYPE abap_bool DEFAULT abap_false
      RETURNING
        value(ro_entity) TYPE REF TO if_rest_entity .
    METHODS get_response_entity
      RETURNING
        value(ro_response_entity) TYPE REF TO if_rest_entity .
ENDCLASS.                    "ZCL_REST_FRAMEWORK DEFINITION

*----------------------------------------------------------------------*
*       CLASS ZCL_REST_FRAMEWORK IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_rest_framework IMPLEMENTATION.

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->CLOSE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  close.
*----------------------------------------------------------------------*
*                       Modification History                           *
*----------------------------------------------------------------------*
* Date      | USER ID  |  VSTF  | Transport  | Remarks                 *
*-----------|----------|--------|------------|-------------------------*
*05/26/2016| KRDASH    |2165812 | MS2K955227 | Closing Http client     *
*                                              connection              *
*----------------------------------------------------------------------*
    DATA :rest_exception TYPE REF TO cx_rest_client_exception.
    TRY.
        rest_client->if_rest_client~close( ).
      CATCH cx_rest_client_exception INTO rest_exception.
    ENDTRY.
  ENDMETHOD.                    "close

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] INTERFACE_NAME                 TYPE        ZINTERFACE_ID
* | [--->] BUSINESS_IDENTIFIER            TYPE        ZBUSINESSID(optional)
* | [--->] METHOD                         TYPE        CHAR20
* | [--->] LOGDATA_IN_UPDATETASK          TYPE        CHAR1(optional)
* | [!CX!] ZCX_INTERACE_CONFIG_MISSING
* | [!CX!] ZCX_HTTP_CLIENT_FAILED
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
**   Create the unique guid . This is used across all the tables for storing
**   and retrieving the information related to REST calls
*    message_id = me->set_guid( ).
*   Set the calling interface.This needs to be provided by while creating instance
    DATA: cx_interface_missing TYPE REF TO   zcx_interace_config_missing,
          cx_http_client_failed TYPE REF TO zcx_http_client_failed.
    CREATE OBJECT: cx_interface_missing,
                   cx_http_client_failed.
    interface = interface_name.
    businessid = business_identifier.
    method_call = method.
    log_update_task = logdata_in_updatetask .
*   Create the HTTP client and raise exception if interface is not found in the config
*   Propagate the error to the calling program
    TRY .
**http_client = createhttpclient( EXPORTING interface = interface_name  method = method ).  v-jobpau

*TRY.
        CALL METHOD me->createhttpclient
          EXPORTING
            interface   = interface_name
            method      = method
          RECEIVING
            http_client = http_client.

*      CATCH zcx_interace_config_missing INTO DATA(cx_interface_missing).  v-jobpau
      CATCH zcx_interace_config_missing INTO cx_interface_missing.
        RAISE EXCEPTION cx_interface_missing.
*      CATCH zcx_http_client_failed INTO DATA(cx_http_client_failed).   v-jobpau
      CATCH zcx_http_client_failed INTO cx_http_client_failed.
        RAISE EXCEPTION cx_http_client_failed.
    ENDTRY.
*   Set the protocol method as HTTP 1.1--Hard code this..Not gonna change
    http_client->request->set_version( if_http_request=>co_protocol_version_1_1 ).
*   Set the request
    create_request_entity( ).
  ENDMETHOD.                    "constructor

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->CREATEHTTPCLIENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] INTERFACE                      TYPE        ZINTERFACE_ID
* | [--->] METHOD                         TYPE        CHAR20
* | [<-()] HTTP_CLIENT                    TYPE REF TO IF_HTTP_CLIENT
* | [!CX!] ZCX_INTERACE_CONFIG_MISSING
* | [!CX!] ZCX_HTTP_CLIENT_FAILED
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  createhttpclient.
*   Start loggin the request
    set_interface_id( interface = interface ).
*   Check against the configuration table ZREST_CONFIG and see if there exists entry. if not
*   Raise an exception if either destination is missing or inteface Id is missing.There is no
*   point in proceeding further.Calling program would need to catch this exception !
    DATA: wa_config TYPE zrest_srtuct_config.
*    DATA(wa_config) = zcl_rest_utility_class=>get_config_data( exporting interface_id = interface  method = method ). v-jobpau
    CALL METHOD zcl_rest_utility_class=>get_config_data
      EXPORTING
        interface_id = interface
        method       = method
      RECEIVING
        config_data  = wa_config.

    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_interace_config_missing.
    ELSEIF wa_config-destination IS INITIAL.
      RAISE EXCEPTION TYPE zcx_interace_config_missing.
    ENDIF.
*   Create the http client by destination
    CALL METHOD cl_http_client=>create_by_destination
      EXPORTING
        destination              = wa_config-destination
      IMPORTING
        client                   = http_client
      EXCEPTIONS
        argument_not_found       = 1
        destination_not_found    = 2
        destination_no_authority = 3
        plugin_not_active        = 4
        internal_error           = 5
        OTHERS                   = 6.
    CASE sy-subrc.
      WHEN 1 OR 2 OR 3 OR 4 OR 5 OR 6.
        RAISE EXCEPTION TYPE zcx_http_client_failed.
    ENDCASE.
*   Go ahead with processign and create the http client
    http_client->propertytype_logon_popup = http_client->co_disabled.
    rest_client = createrestclient( iv_http_client =  http_client ).
  ENDMETHOD.                    "createhttpclient

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->CREATERESTCLIENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_HTTP_CLIENT                 TYPE REF TO IF_HTTP_CLIENT
* | [<-()] RV_REST_CLIENT                 TYPE REF TO CL_REST_HTTP_CLIENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  createrestclient.
    TRY .
        CREATE OBJECT rv_rest_client
          EXPORTING
            io_http_client = iv_http_client.
        gwa_log-status = 'E'.
        gwa_log-reason = 'REST Client Created' .
      CATCH cx_root.
        gwa_log-status = 'E'.
        gwa_log-reason = 'Failed to create REST Client' .
    ENDTRY.
  ENDMETHOD.                    "createrestclient

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->CREATE_REQUEST_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_MULTIPART                   TYPE        ABAP_BOOL (default =ABAP_FALSE)
* | [<-()] RO_ENTITY                      TYPE REF TO IF_REST_ENTITY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  create_request_entity.
* Begin of changes by v-vekum on 05/04/2017 TR#MS2K955280
    IF method_call EQ 'GET'.
    ELSE.
      request = rest_client->if_rest_client~create_request_entity( iv_multipart ).
    ENDIF.
* End of changes by v-vekum on 05/04/2017 TR#MS2K955280
  ENDMETHOD.                    "create_request_entity

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_BUSINESSID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE        ZBUSINESSID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_businessid.
    result = businessid.
  ENDMETHOD.                    "GET_BUSINESSID

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_CALLINGMETHOD
* +-------------------------------------------------------------------------------------------------+
* | [<-()] ZEMETHOD                       TYPE        ZCLASSNAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_callingmethod.
    zemethod =  calling_method_name.
  ENDMETHOD.                    "get_callingmethod

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_CALLINGPROGRAM
* +-------------------------------------------------------------------------------------------------+
* | [<-()] ZECLASSNAME                    TYPE        ZCLASSNAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_callingprogram.
    zeclassname =  calling_program_name.
  ENDMETHOD.                    "get_callingprogram

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_DURATION
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_SECS                         TYPE        TZNTSTMPL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_duration.
    r_secs = duration.
    r_secs = r_secs * -1000. "microseconds
  ENDMETHOD.                    "GET_DURATION

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_ENDATE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_ENDDATE                     TYPE        DATUM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_endate.
    rv_enddate =   end_date.
  ENDMETHOD.                    "get_endate

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_ENDTIME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_ENDTIME                     TYPE        SY-UZEIT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_endtime.
    rv_endtime =  end_time.
  ENDMETHOD.                    "get_endtime

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE        GUID_16
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_guid.
    result = message_id.
  ENDMETHOD.                    "get_guid

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_HTTP_CLIENT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE REF TO IF_HTTP_CLIENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_http_client.
    result = http_client.
  ENDMETHOD.                    "GET_HTTP_CLIENT

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_INTERFACE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] INTERFACE_NAME                 TYPE        ZINTERFACE_ID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_interface.
    interface_name = interface.
  ENDMETHOD.                    "GET_INTERFACE

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_METHOD
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE        CHAR20
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_method.
    result = method_call.
  ENDMETHOD.                    "GET_METHOD

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_PROGRAM_HEADERS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE        TIHTTPNVP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_program_headers.
    result = program_headers.
    REFRESH program_headers. "v-javeda | MS2K948978
  ENDMETHOD.                    "get_program_headers

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_REQUEST
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE REF TO IF_REST_ENTITY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_request.
    result = request.
  ENDMETHOD.                    "GET_REQUEST

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->GET_RESPONSE_ENTITY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_RESPONSE_ENTITY             TYPE REF TO IF_REST_ENTITY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_response_entity.
    ro_response_entity = me->rest_client->if_rest_client~get_response_entity( ).
    response  = ro_response_entity.
*    IF ro_response_entity IS BOUND.
*      gwa_log-status =  ro_response_entity->get_header_field( '~status_code' ).
*      gwa_log-reason  = ro_response_entity->get_header_field( '~status_reason' ).
*      gwa_log-content_length  = ro_response_entity->get_header_field( 'content-length' ).
*      gwa_log-location = ro_response_entity->get_header_field( 'location' ).
*      gwa_log-content_type = ro_response_entity->get_header_field( 'content-type' ).
*      gwa_log-response = ro_response_entity->get_string_data( ).
*
*      gwa_log-status =  'S'.
*      gwa_log-reason  = 'Response Recieved'.
*
*      wa_error_log-zmessageid   =  message_id.
*      counter = counter + 1.
*      wa_error_log-counter      = counter.
*      wa_error_log-zmessageclass = 'No Response Recieved'.
*      APPEND wa_error_log TO it_error_log.
*      CLEAR  wa_error_log.
*
*    ELSE.
*
*      gwa_log-status =  'E'.
*      gwa_log-reason  = 'No Response Recieved'.
*
*      wa_error_log-zmessageid   =  message_id.
*      counter = counter + 1.
*      wa_error_log-counter      = counter.
*      wa_error_log-zmessageclass = 'No Response Recieved'.
*      APPEND wa_error_log TO it_error_log.
*      CLEAR  wa_error_log.
*
*    ENDIF.
  ENDMETHOD.                    "get_response_entity

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_RESPONSE_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* | [<-()] RV_VALUE                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_response_header.
*    rv_value = me->rest_client->if_rest_client~get_response_header( EXPORTING iv_name = iv_name ). v-jobpau
    CALL METHOD me->rest_client->if_rest_client~get_response_header
      EXPORTING
        iv_name  = iv_name
      RECEIVING
        rv_value = rv_value.

  ENDMETHOD.                    "get_response_header

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_RESPONSE_HEADERS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_HEADER_FIELDS               TYPE        TIHTTPNVP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_response_headers.
    rt_header_fields = me->rest_client->if_rest_client~get_response_headers(  ).
  ENDMETHOD.                    "get_response_headers

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_REST_CLIENT
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE REF TO CL_REST_HTTP_CLIENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_rest_client.
    result = rest_client.
  ENDMETHOD.                    "GET_REST_CLIENT

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_RETRYNUM
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE        ZQ_COUNTE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_retrynum.
    result = retry_cnt.
  ENDMETHOD.                    "GET_RETRYNUM

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_STARTDATE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_STARTDATE                   TYPE        SY-DATUM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_startdate.
    rv_startdate =  start_date.
  ENDMETHOD.                    "get_startdate

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_STARTTIME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_STARTTIME                   TYPE        SY-UZEIT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_starttime.
    rv_starttime =  start_time.
  ENDMETHOD.                    "get_starttime

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_STATUS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_STATUS                      TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_status.
    IF  rest_client IS BOUND.
      rv_status =  rest_client->if_rest_client~get_status( ).
    ENDIF.
  ENDMETHOD.                    "get_status

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_SUBMITDATE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SUBMITDATE                  TYPE        SY-DATUM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_submitdate.
    rv_submitdate =  submit_date.
  ENDMETHOD.                    "get_submitdate

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_SUBMITTIME
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SUBMITTIME                  TYPE        SY-UZEIT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_submittime.
    rv_submittime =  submit_time.
  ENDMETHOD.                    "get_submittime

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_URI
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE        ZURI
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_uri.
    result = uri_final.
  ENDMETHOD.                    "GET_URI

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->GET_USER
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_USER                        TYPE        SY-UNAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  get_user.
    rv_user =  user.
  ENDMETHOD.                    "get_user

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->IS_RETRY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RESULT                         TYPE        ABAP_BOOL
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD is_retry.
    IF retry EQ abap_true.
      result = abap_true.
    ELSE.
      result = abap_false.
    ENDIF.
  ENDMETHOD.                    "is_retry

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->LOG_END_PARAMS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD log_end_params.
    set_enddate( iv_endate = sy-datum ).
    set_endtime( iv_endtime = sy-uzeit ).
  ENDMETHOD.                    "log_end_params

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->LOG_START_PARAMS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD log_start_params.
    set_user( ).
    set_startdate( ).
    set_starttime( ).
  ENDMETHOD.                    "log_start_params

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->LOG_SUBMIT_PARAMS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD log_submit_params.
    set_submitdate( ).
    set_submittime( ).
  ENDMETHOD.                    "log_submit_params

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SAVE_LOG
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  save_log.

    CALL FUNCTION 'ZSAVE_REST_LOG'
      EXPORTING
        framework_class = me
        update_task     = log_update_task.
  ENDMETHOD.                    "save_log

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->SET_CALLINGMETHOD
* +-------------------------------------------------------------------------------------------------+
* | [--->] ZIMETHODNAME                   TYPE        ZMETHODNAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_callingmethod.
    calling_method_name = zimethodname.

  ENDMETHOD.                    "set_callingmethod

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->SET_CALLINGPROGRAM
* +-------------------------------------------------------------------------------------------------+
* | [--->] ZICLASSNAME                    TYPE        ZCLASSNAME
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_callingprogram.
    calling_program_name = ziclassname.
  ENDMETHOD.                    "set_callingprogram

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_ENDDATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENDATE                      TYPE        DATUM
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_enddate.
    end_date = iv_endate  .
  ENDMETHOD.                    "set_enddate

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_ENDTIME
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_ENDTIME                     TYPE        SY-UZEIT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_endtime.
    end_time = iv_endtime.
  ENDMETHOD.                    "set_endtime

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->SET_GUID
* +-------------------------------------------------------------------------------------------------+
* | [<-()] GUID                           TYPE        GUID_16
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_guid.
    IF retry EQ abap_false.
      CALL FUNCTION 'GUID_CREATE'
        IMPORTING
          ev_guid_16 = guid.
      message_id = guid.
    ELSE.
    ENDIF.
  ENDMETHOD.                    "set_guid

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_INTERFACE_ID
* +-------------------------------------------------------------------------------------------------+
* | [--->] INTERFACE                      TYPE        ZINTERFACE_ID
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_interface_id.
    gwa_log-interface_id = interface.
  ENDMETHOD.                    "SET_INTERFACE_ID

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_STARTDATE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_startdate.
    start_date = sy-datum.
  ENDMETHOD.                    "set_startdate

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_STARTTIME
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_starttime.
    start_time = sy-uzeit.
  ENDMETHOD.                    "set_starttime

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_SUBMITDATE
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_submitdate.
    submit_date = sy-datum.
  ENDMETHOD.                    "set_submitdate

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_SUBMITTIME
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_submittime.
    start_date = sy-datum.
  ENDMETHOD.                    "set_submittime

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_REST_FRAMEWORK->SET_USER
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  set_user.
    user = sy-uname.
  ENDMETHOD.                    "set_user

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->ZIF_REST_FRAMEWORK~EXECUTE
* +-------------------------------------------------------------------------------------------------+
* | [--->] METHOD                         TYPE        CHAR20 (default ='GET')
* | [--->] IO_ENTITY                      TYPE REF TO IF_REST_ENTITY(optional)
* | [--->] ASYNC                          TYPE        ABAP_BOOL
* | [--->] IS_RETRY                       TYPE        CHAR1
* | [--->] MESSAGEID                      TYPE        GUID_16(optional)
* | [--->] RETRY_COUNT                    TYPE        ZQ_COUNTE(optional)
* | [<-()] RESPONSE                       TYPE REF TO IF_REST_ENTITY
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  zif_rest_framework~execute.
    DATA: lwa_config_data TYPE zrest_srtuct_config,
          rest_exception TYPE REF TO cx_rest_client_exception.
    CREATE OBJECT rest_exception.
    GET TIME STAMP FIELD pre_timestamp.
*   Create the unique guid . This is used across all the tables for storing
*   and retrieving the information related to REST calls
    message_id = me->set_guid( ).
*   Is this a retry ?
    retry = is_retry.
*   Chaneg only for the retry sceario.
    IF is_retry( ) EQ abap_true.
      message_id = messageid.
      retry_cnt = retry_count + 1.
    ENDIF.
*   This method will execute GET,POST,PUT ...ased on the configuration set for the inteface. If Async is set , Request will
*   in the wating status till the async program flushes this out. Apart from executing the calls , this method will hold
*   the metrics of data
*   Get the configuration data for the inteface.
*    DATA(lwa_config_data) = zcl_rest_utility_class=>get_config_data( EXPORTING interface_id  =  interface method = method_call ). v-jobpau

    CALL METHOD zcl_rest_utility_class=>get_config_data
      EXPORTING
        interface_id = interface
        method       = method_call
      RECEIVING
        config_data  = lwa_config_data.

*   Get the static headers from the configuration
    rest_client->if_rest_client~set_request_headers( zcl_rest_utility_class=>get_static_headers( interface_id =  interface ) ).
*   Set the corelation id
    DATA lv_value TYPE string.
    lv_value = message_id.
    rest_client->if_rest_client~set_request_header( iv_name = 'id-sap-restfrmwrk' iv_value = lv_value ).
*   Set the basic log parameters
    log_start_params( ).
    gwa_log-method = method.
*   If it's Async , record and exit
    IF async EQ abap_false.
      TRY .
          CASE lwa_config_data-method.
            WHEN  head.
              rest_client->if_rest_resource~head( ).
            WHEN  get.
              rest_client->if_rest_resource~get( ).
            WHEN  delete.
              rest_client->if_rest_resource~delete( ).
            WHEN  options.
              rest_client->if_rest_resource~options( ).
            WHEN  post.
              rest_client->if_rest_resource~post(  request ).
            WHEN  put.
              rest_client->if_rest_resource~put(   request ).
          ENDCASE.
*Log End parameters
          log_end_params( ).
*        CATCH cx_rest_client_exception INTO data(rest_exception). v-jobpau
        CATCH cx_rest_client_exception INTO rest_exception.
          log_end_params( ).
          gwa_log-reason = rest_exception->get_text( ).
      ENDTRY.
*Read the respomse and set the appropriate reason
      response =  rest_client->if_rest_client~get_response_entity( ).
      IF response IS BOUND.
        gwa_log-reason = 'Endpoint Called' .
      ENDIF.
    ELSE.
*Log the submitted time
      log_submit_params( ).
      gwa_log-reason = 'Async-Waiting'.
    ENDIF.
*   duration = duration * -1000. " Convert to microseconds
    GET TIME STAMP FIELD pro_timestamp.
*    duration = cl_abap_tstmp=>subtract( exporting tstmp1 = pre_timestamp tstmp2 = pro_timestamp ). v-jobpau
*    TRY.
    CALL METHOD cl_abap_tstmp=>subtract
      EXPORTING
        tstmp1 = pre_timestamp
        tstmp2 = pro_timestamp
      RECEIVING
        r_secs = duration.
*     CATCH cx_parameter_invalid_range .
*     CATCH cx_parameter_invalid_type .
*    ENDTRY.

*   Save the log to database for further reporing
    me->save_log( ).
  ENDMETHOD.                    "zif_rest_framework~execute

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->ZIF_REST_FRAMEWORK~SET_BINARY_BODY
* +-------------------------------------------------------------------------------------------------+
* | [--->] BODY                           TYPE        XSTRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_rest_framework~set_binary_body.
    IF body IS NOT INITIAL.
      request->set_binary_data( body ).
    ENDIF.
  ENDMETHOD.                    "zif_rest_framework~set_binary_body

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->ZIF_REST_FRAMEWORK~SET_REQUEST_HEADER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NAME                        TYPE        STRING
* | [--->] IV_VALUE                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_rest_framework~set_request_header.
    DATA lv_tihttpnvp TYPE LINE OF tihttpnvp.
    lv_tihttpnvp-name = iv_name.
    lv_tihttpnvp-value = iv_value.
    APPEND lv_tihttpnvp TO program_headers.
    CLEAR lv_tihttpnvp.
    http_client->request->set_header_field( EXPORTING name = iv_name value = iv_value ).
  ENDMETHOD.                    "zif_rest_framework~set_request_header

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->ZIF_REST_FRAMEWORK~SET_REQUEST_HEADERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_HEADER_FIELDS               TYPE        TIHTTPNVP
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_rest_framework~set_request_headers.
    DATA: lv_tihttpnvp TYPE LINE OF tihttpnvp,
          wa_modified_headers TYPE ihttpnvp.
*    LOOP AT it_header_fields INTO DATA(wa_modified_headers). v-jobpau
    LOOP AT it_header_fields INTO wa_modified_headers.
      lv_tihttpnvp-name  = wa_modified_headers-name.
      lv_tihttpnvp-value = wa_modified_headers-value.
      APPEND lv_tihttpnvp TO program_headers.
      CLEAR lv_tihttpnvp.
    ENDLOOP.
    http_client->request->set_header_fields( it_header_fields  ).
  ENDMETHOD.                    "zif_rest_framework~set_request_headers

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->ZIF_REST_FRAMEWORK~SET_STRING_BODY
* +-------------------------------------------------------------------------------------------------+
* | [--->] BODY                           TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD  zif_rest_framework~set_string_body.
    IF body IS NOT INITIAL.
      request->set_string_data( body ).
    ENDIF.
  ENDMETHOD.                    "zif_rest_framework~set_string_body

* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_REST_FRAMEWORK->ZIF_REST_FRAMEWORK~SET_URI
* +-------------------------------------------------------------------------------------------------+
* | [--->] URI                            TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_rest_framework~set_uri.
    CHECK uri IS NOT INITIAL.
    cl_http_utility=>set_request_uri(
        request = http_client->request    " HTTP Framework (iHTTP) HTTP Request
        uri     = uri                     " URI String (in the Form of /path?query-string)
           ).
    uri_final = uri.
  ENDMETHOD.                    "zif_rest_framework~set_uri

ENDCLASS.                    "ZCL_REST_FRAMEWORK IMPLEMENTATION
